// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: ai_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	// 根据图片路径获取图片分类
	ClassifyImage(ctx context.Context, in *ClassificationRequest, opts ...grpc.CallOption) (*ClassificationResponse, error)
	// 根据图片路径获取人脸信息
	RecognizeFaces(ctx context.Context, in *FaceRecognitionRequest, opts ...grpc.CallOption) (*FaceRecognitionResponse, error)
	// 获取文字的特征向量
	TextClip(ctx context.Context, in *TextClipRequest, opts ...grpc.CallOption) (*VectorResponse, error)
	// 获取图片的特征向量
	ImageClip(ctx context.Context, in *ImageClipRequest, opts ...grpc.CallOption) (*VectorResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) ClassifyImage(ctx context.Context, in *ClassificationRequest, opts ...grpc.CallOption) (*ClassificationResponse, error) {
	out := new(ClassificationResponse)
	err := c.cc.Invoke(ctx, "/ai.AIService/ClassifyImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) RecognizeFaces(ctx context.Context, in *FaceRecognitionRequest, opts ...grpc.CallOption) (*FaceRecognitionResponse, error) {
	out := new(FaceRecognitionResponse)
	err := c.cc.Invoke(ctx, "/ai.AIService/RecognizeFaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) TextClip(ctx context.Context, in *TextClipRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, "/ai.AIService/TextClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) ImageClip(ctx context.Context, in *ImageClipRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, "/ai.AIService/ImageClip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility
type AIServiceServer interface {
	// 根据图片路径获取图片分类
	ClassifyImage(context.Context, *ClassificationRequest) (*ClassificationResponse, error)
	// 根据图片路径获取人脸信息
	RecognizeFaces(context.Context, *FaceRecognitionRequest) (*FaceRecognitionResponse, error)
	// 获取文字的特征向量
	TextClip(context.Context, *TextClipRequest) (*VectorResponse, error)
	// 获取图片的特征向量
	ImageClip(context.Context, *ImageClipRequest) (*VectorResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIServiceServer struct {
}

func (UnimplementedAIServiceServer) ClassifyImage(context.Context, *ClassificationRequest) (*ClassificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyImage not implemented")
}
func (UnimplementedAIServiceServer) RecognizeFaces(context.Context, *FaceRecognitionRequest) (*FaceRecognitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeFaces not implemented")
}
func (UnimplementedAIServiceServer) TextClip(context.Context, *TextClipRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextClip not implemented")
}
func (UnimplementedAIServiceServer) ImageClip(context.Context, *ImageClipRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageClip not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_ClassifyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ClassifyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.AIService/ClassifyImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ClassifyImage(ctx, req.(*ClassificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_RecognizeFaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceRecognitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).RecognizeFaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.AIService/RecognizeFaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).RecognizeFaces(ctx, req.(*FaceRecognitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_TextClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextClipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).TextClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.AIService/TextClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).TextClip(ctx, req.(*TextClipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_ImageClip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageClipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ImageClip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.AIService/ImageClip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ImageClip(ctx, req.(*ImageClipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyImage",
			Handler:    _AIService_ClassifyImage_Handler,
		},
		{
			MethodName: "RecognizeFaces",
			Handler:    _AIService_RecognizeFaces_Handler,
		},
		{
			MethodName: "TextClip",
			Handler:    _AIService_TextClip_Handler,
		},
		{
			MethodName: "ImageClip",
			Handler:    _AIService_ImageClip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_service.proto",
}
